@model AddTaskViewModel
@using synced.Models
@{
    var currentUserId = Context.Session.GetInt32("UserId") ?? 0;
}

<div class="d-flex justify-content-center align-items-center container" style="min-height: 100vh;">
    <div class="modal-dialog d-flex flex-row container" style="max-width: 1000px;">
        <div class="modal-content w-100">
            <div class="modal-header">
                <h5 class="modal-title" id="taskModalLabel">@(Model.Task.Id == 0 ? "Create Task" : "Update Task")</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-row gap-5">
                <!-- Task Form (Left Side) -->
                <form id="taskForm_@Model.Task.Id" asp-page="/Dashboard/Index" asp-page-handler="OnPostAsync" method="post" class="needs-validation w-100" >
                    <input type="hidden" asp-for="Task.Id" />
                    <input type="hidden" asp-for="Task.Project_id" />
                    <div class="mb-3">
                        <label for="taskTitle_@Model.Task.Id" class="form-label">Title</label>
                        <input type="text" class="form-control" id="taskTitle_@Model.Task.Id" asp-for="Task.Title" required />
                        <div class="invalid-feedback">Please enter a title</div>
                    </div>
                    <div class="mb-3">
                        <label for="taskDescription_@Model.Task.Id" class="form-label">Description</label>
                        <textarea class="form-control" id="taskDescription_@Model.Task.Id" asp-for="Task.Description" required></textarea>
                        <div class="invalid-feedback">Please enter a description</div>
                    </div>
                    <div class="mb-3 d-flex justify-content-between gap-2">
                        <div>
                            <label class="form-label">Status</label>
                            <select class="form-control" id="taskStatus_@Model.Task.Id" asp-for="Task.Status">
                                <option value="@Status.todo">To Do</option>
                                <option value="@Status.inprogress">In Progress</option>
                                <option value="@Status.done">Done</option>
                            </select>
                        </div>
                        <div>
                            <label class="form-label">Priority</label>
                            <select class="form-control" id="taskPriority_@Model.Task.Id" asp-for="Task.Priority">
                                <option value="@Priorities.high">High</option>
                                <option value="@Priorities.medium">Medium</option>
                                <option value="@Priorities.low">Low</option>
                            </select>
                        </div>
                        <div>
                            <label class="form-label">Deadline</label>
                            <input type="date" class="form-control" id="taskDeadline_@Model.Task.Id" asp-for="Task.Deadline" required />
                            <div class="invalid-feedback">Please select a deadline</div>
                        </div>
                    </div>
                    <div class="mb-4">
                        <label class="form-label">Assigned To</label>
                        <select class="form-control" id="taskAssignedTo_@Model.Task.Id" asp-for="Task.User_id">
                            <option value="">Select a user</option>
                            @foreach (var user in Model.Task.Users)
                            {
                                <option value="@user.Id" selected="@(Model.Task.User_id == user.Id ? "selected" : null)">@user.Firstname</option>
                            }
                        </select>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">Save Task</button>
                </form>

                <!-- Comments Section (Right Side) -->
                @if (Model.Task.Id > 0)
                {
                    <div class="rounded p-3 border-start w-50" style="min-width: 400px;">
                        <h5>Comments</h5>
                        <div id="commentsContainer_@Model.Task.Id" class="comment-list overflow-auto" style="height: 500px;">
                            <partial name="~/Pages/Shared/Components/AddTaskModal/CommentsList.cshtml"
                                     model="Model.Comments" />
                        </div>

                        <!-- Add Comment -->
                        <form id="commentForm_@Model.Task.Id"
                              onsubmit="submitComment(event, @Model.Task.Id)"
                              class="mt-auto">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="taskId" value="@Model.Task.Id">

                            <div class="mb-3">
                                <textarea class="form-control" name="commentText" required></textarea>
                            </div>

                            <button type="submit" class="btn btn-primary">Add Comment</button>
                        </form>
                        <script>
                            function submitComment(event, taskId) {
                                event.preventDefault();
                                const form = event.target;

                                fetch('?handler=Comment', {
                                    method: 'POST',
                                    body: new FormData(form),
                                    headers: {
                                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                                    }
                                })
                                .then(response => response.text())
                                .then(html => {
                                    // Replace just the comments list
                                    document.querySelector(`#commentsContainer_${taskId}`).innerHTML = html;
                                    form.reset();
                                })
                                .catch(error => console.error('Error:', error));
                            }
                        </script>
                    </div>
                }
            </div>
        </div>
    </div>
</div>